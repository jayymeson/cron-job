version: "3.8"

services:
  internal-postgres:
    image: postgres:15-alpine
    container_name: internal-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cronjob_db
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - cronjob_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cronjob_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  external-postgres:
    image: postgres:15-alpine
    container_name: external-postgres
    environment:
      POSTGRES_USER: external_user
      POSTGRES_PASSWORD: external_pass
      POSTGRES_DB: external_db
    ports:
      - "5433:5432"
    networks:
      - cronjob_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U external_user -d external_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  sync-app:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: sync-app
    environment:
      DATABASE_HOST: internal-postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: cronjob_db
      DATABASE_SYNC: true
      DATABASE_LOGGING: true
      EXTERNAL_DB_HOST: external-postgres
      EXTERNAL_DB_PORT: 5432
      EXTERNAL_DB_USERNAME: external_user
      EXTERNAL_DB_PASSWORD: external_pass
      EXTERNAL_DB_NAME: external_db
      NODE_ENV: development
    depends_on:
      internal-postgres:
        condition: service_healthy
      external-postgres:
        condition: service_healthy
    networks:
      - cronjob_network
    command: ["node", "dist/scripts/sync-users.js"]
    restart: always

volumes:
  postgres_data:
    driver: local

networks:
  cronjob_network:
    driver: bridge
